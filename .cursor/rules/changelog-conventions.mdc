---
alwaysApply: true
---

# Changelog Conventions

**Always update the Changelog.md file upon changing the code!**

Make sure that new changes are always added to the top of the list!

Never change existing release sections.

## Sections and Structure

### WIP Section

- Located at the top of the file after the title
- Format: `## WIP` followed by bullet point entries
- This is where all unreleased changes should be documented

### Version Sections

We use semantic versioning for release versions. Releases appear as sections containing the release version.

- Format: `## X.Y.Z+YYYY-MM-DD` where:
  - X.Y.Z is the version number consisting of
    - X Major Version, to be increased on releasing breaking changes
    - Y Minor Version, to be increased on feature releases. Set to 0 on major version increase.
    - Z Patch Version, to be increased if the release contains only bug fixes. Set to 0 on minor or major version increase.
  - YYYY-MM-DD is the current date at release time
- Example: `## 6.45.0+2025-05-19`

## Entry Guidelines

- We use markdown lists. Start each entry with a dash `-`
- Group related changes together, adding sub items (indentation) to existing ones, if this is a follow up change to the same topic.
- Generally use markdown sub items, i.e. indentation, for sub-details:
  ```
  - New feature: X
  ```
- Use backticks for code references: `` `methodName` ``

## Entry Categories

- **Breaking changes**: Usually warrant a MAJOR version bump (mark these clearly)
- **New features**: Usually warrant a MINOR version bump
- **Bugfixes**: Usually warrant a PATCH version bump

## Best Practices

- Be specific about what changed
- Document regression tests when added
- For API changes, document both old and new behavior
- If an endpoint changed, explicitly mention the old and new endpoint path
- Use consistent terminology
- Keep entries concise but descriptive
- Do not add version headers but extend the WIP section - versions are added in releases
